syntax = "proto3";

package paxoskv;
option go_package = ".;paxoskv";

// Go Modules now includes the version in the filepath for packages within GOPATH/pkg/mode
// Therefore unless we want to hardcode a version here like
// github.com/gogo/protobuf@v1.3.0/gogoproto/gogo.proto then the only other choice is to
// have a more relative import and pass the right import path to protoc. I don't like it
// but its necessary.
import "gogoproto/gogo.proto";

option (gogoproto.equal_all) = true;
option (gogoproto.compare_all) = true;
option (gogoproto.goproto_enum_prefix_all) = true;
option (gogoproto.goproto_getters_all) = false;

enum Op {
    Noop = 0;
    Accept = 1;
    Commit = 2;
}

// PaxosKV defines the paxos RPC and KV API.
service PaxosKV {

    // paxos API: used internally
    rpc HandlePaxos (Request) returns (Reply) {}

    // KV API

    rpc Set (Cmd) returns (Cmd) {}
    rpc Get (Cmd) returns (Cmd) {}
}

message Request {
    Op Op = 1;

    BallotNum Bal = 5;
    int64 Column = 10;
    map<int64, Ins> Instances = 20;
}

message Reply {
    BallotNum LastBal = 5;
    map<int64, Ins> Instances = 20;

}
// BallotNum is the ballot number in paxos. It consists of a monotonically
// incremental number and a universally unique ProposerId.
message BallotNum {
    int64 N = 1;
    int64 Id = 2;
}

// Cmd is the value in this paxos impl, which is a command to set a key-value
// record.
// In this demo it is just string key and a int64 value.
message Cmd {
    string Key = 3;
    int64  Vi64 = 4;
}

// InsId is the id of an instance.
// The tuple (column, lsn, proposer_id) identifies a proposed value.
// Two proposers may propose a same Cmd, in which case
// these two must be distinguishable, otherwise a Write operation may be
// lost.
message InsId {
    int64 Column = 1;
    // LSN: log-sequence-number
    int64 LSN = 5;
    // ProposerId is the server id that proposes an instance.
    int64 ProposerId = 10;
}

// Instance is the state of an Instance and is the log entry in a multi column logs paxos
message Ins {

    InsId InsId = 1;

    // the value proposed on this Instance
    Cmd Val = 3;

    // at which ballot number the Instance voted it.
    BallotNum VBal = 5;

    // What other instance this instance sees.
    // This view is used to decide the order to apply instances.
    // Intuitively, the more instance one sees, the later it is applied.
    repeated int64 Deps = 6;

    bool Committed = 7;
}
